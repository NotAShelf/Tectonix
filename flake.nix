{
  description = "Manage Terraform/Opentofu using Nix DSL";

  inputs.nixpkgs.url = "github:nixos/nixpkgs?ref=nixos-unstable";

  outputs = {nixpkgs, ...}: let
    # Generate Terraform configuration in JSON format as a Nix store path
    # This is just a wrapper around writeJSON, but hardcodes terraform.json
    # to avoid ambiguity issues down the road.
    mkTerraformManifest = pkgs: args:
      pkgs.writers.writeJSON "terraform.json" args;

    mkTerraformHook = pkgs: args:
      pkgs.writeShellScriptBin "terraform_check" ''
        set -xeu

        # Path to the terraform.json generated by Nix
        TERRAFORM_CONFIG="$${TERRAFORM_CONFIG:-$(nix path-info ${mkTerraformManifest args})}"

        if [ ! -f "$TERRAFORM_CONFIG" ]; then
          echo "Error: terraform.json does not exist at $TERRAFORM_CONFIG"
          exit 1
        fi

        echo "Using Terraform configuration from: $TERRAFORM_CONFIG"

        # Check if terraform.json is up-to-date by comparing the hash
        HASH_FILE=".terraform.json.hash"
        CURRENT_HASH=$(sha256sum "$TERRAFORM_CONFIG" | cut -d' ' -f1)

        if [ -f "$HASH_FILE" ]; then
          LAST_HASH=$(cat "$HASH_FILE")
          if [ "$CURRENT_HASH" == "$LAST_HASH" ]; then
            echo "No changes in the configuration since last run."
          else
            echo "Configuration has been updated, running terraform init..."
            terraform init
            echo "$CURRENT_HASH" > "$HASH_FILE"
          fi
        else
          echo "First run or configuration has changed, running terraform init..."
          terraform init
          echo "$CURRENT_HASH" > "$HASH_FILE"
        fi

        # Allow user to run terraform apply if they wish
        echo "Configuration is valid. Run 'terraform apply' to apply the changes."
        echo "Hint: To verify the changes to be made, run 'terraform plan'"
      '';

    # TODO: cleaner argument parsing, or usage of flake-parts
    mkTerraformShell = pkgs: args:
      pkgs.mkShellNoCC {
        packages = with pkgs; [terraform jq];

        # Generate the bash script as a build input (Nix store path)
        nativeBuildInputs = [pkgs.writeShellScriptBin "terraform_check" (mkTerraformHook args)];

        shellHook = ''
          echo "Terraform wrapper is ready, and in your shell"
          echo "Run it with 'terraform_check' to validate your configuration."
        '';
      };
  in let
    # TODO: maybe... not do this?
    pkgs = import nixpkgs {system = "x86_64-linux";};
  in {
    lib = {
      inherit mkTerraformHook; # low-level wrapper for only generating the hook
      inherit mkTerraformShell; # high-level wrapper for generating and wrapping the hook
    };
  };
}
